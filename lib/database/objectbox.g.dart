// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models/album.dart';
import '../models/artist.dart';
import '../models/genre.dart';
import '../models/music_color.dart';
import '../models/song.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8440881531056850493),
      name: 'Album',
      lastPropertyId: const obx_int.IdUid(4, 961771146083296052),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1230007991343479423),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2610160443812700902),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5182564456990978250),
            name: 'picture',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 961771146083296052),
            name: 'artistId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 4214596295991764306),
            relationTarget: 'Artist')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'songs', srcEntity: 'Song', srcField: 'album')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7532154297802897771),
      name: 'Artist',
      lastPropertyId: const obx_int.IdUid(3, 1475912299933615236),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6414358718615360251),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 923523403980957935),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1475912299933615236),
            name: 'picture',
            type: 23,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'songs', srcEntity: 'Song', srcField: 'artist'),
        obx_int.ModelBacklink(
            name: 'albums', srcEntity: 'Album', srcField: 'artist')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5323655028716215377),
      name: 'Genre',
      lastPropertyId: const obx_int.IdUid(3, 5738142651511766062),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3243251279445941220),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4258590337348061470),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5738142651511766062),
            name: 'picture',
            type: 23,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'songs', srcEntity: 'Song', srcField: 'genre')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6497590176427579550),
      name: 'Song',
      lastPropertyId: const obx_int.IdUid(10, 2942306982142154184),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 937970576238746613),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1780087795157600179),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2587030695437218407),
            name: 'path',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6120740321289834035),
            name: 'duration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4704007675093067046),
            name: 'year',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8200934840536006746),
            name: 'picture',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6646752320738693818),
            name: 'artistId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 2394529475630706640),
            relationTarget: 'Artist'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 9163309267891146034),
            name: 'albumId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 5049358481360515102),
            relationTarget: 'Album'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1313285635622323818),
            name: 'genreId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 7565656267712023963),
            relationTarget: 'Genre'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2942306982142154184),
            name: 'modified',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'colors', srcEntity: 'MusicColor', srcField: 'song')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 8869230512487373120),
      name: 'MusicColor',
      lastPropertyId: const obx_int.IdUid(9, 3465104969620754882),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5558345813382195562),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7850994761262333986),
            name: 'songId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 8923944927584716313),
            relationTarget: 'Song'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6413553713852324861),
            name: 'dbBackground',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7279141139604890194),
            name: 'dbText',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2265012943410117396),
            name: 'dbIcon',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7522163142601365829),
            name: 'dbInactive',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6672391655949655437),
            name: 'dbOther',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5009152402973785137),
            name: 'dbTheme',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3465104969620754882),
            name: 'dbPalette',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 8869230512487373120),
      lastIndexId: const obx_int.IdUid(5, 8923944927584716313),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Album: obx_int.EntityDefinition<Album>(
        model: _entities[0],
        toOneRelations: (Album object) => [object.artist],
        toManyRelations: (Album object) => {
              obx_int.RelInfo<Song>.toOneBacklink(
                      8, object.id, (Song srcObject) => srcObject.album):
                  object.songs
            },
        getId: (Album object) => object.id,
        setId: (Album object, int id) {
          object.id = id;
        },
        objectToFB: (Album object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final pictureOffset = object.picture == null
              ? null
              : fbb.writeListInt8(object.picture!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, pictureOffset);
          fbb.addInt64(3, object.artist.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pictureParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 8) as Uint8List?;
          final object = Album(name: nameParam, picture: pictureParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.artist.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.artist.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Album>(
              object.songs,
              store,
              obx_int.RelInfo<Song>.toOneBacklink(
                  8, object.id, (Song srcObject) => srcObject.album));
          return object;
        }),
    Artist: obx_int.EntityDefinition<Artist>(
        model: _entities[1],
        toOneRelations: (Artist object) => [],
        toManyRelations: (Artist object) => {
              obx_int.RelInfo<Song>.toOneBacklink(
                      7, object.id, (Song srcObject) => srcObject.artist):
                  object.songs,
              obx_int.RelInfo<Album>.toOneBacklink(
                      4, object.id, (Album srcObject) => srcObject.artist):
                  object.albums
            },
        getId: (Artist object) => object.id,
        setId: (Artist object, int id) {
          object.id = id;
        },
        objectToFB: (Artist object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final pictureOffset = object.picture == null
              ? null
              : fbb.writeListInt8(object.picture!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, pictureOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pictureParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 8) as Uint8List?;
          final object = Artist(name: nameParam, picture: pictureParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<Artist>(
              object.songs,
              store,
              obx_int.RelInfo<Song>.toOneBacklink(
                  7, object.id, (Song srcObject) => srcObject.artist));
          obx_int.InternalToManyAccess.setRelInfo<Artist>(
              object.albums,
              store,
              obx_int.RelInfo<Album>.toOneBacklink(
                  4, object.id, (Album srcObject) => srcObject.artist));
          return object;
        }),
    Genre: obx_int.EntityDefinition<Genre>(
        model: _entities[2],
        toOneRelations: (Genre object) => [],
        toManyRelations: (Genre object) => {
              obx_int.RelInfo<Song>.toOneBacklink(
                      9, object.id, (Song srcObject) => srcObject.genre):
                  object.songs
            },
        getId: (Genre object) => object.id,
        setId: (Genre object, int id) {
          object.id = id;
        },
        objectToFB: (Genre object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final pictureOffset = object.picture == null
              ? null
              : fbb.writeListInt8(object.picture!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, pictureOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pictureParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 8) as Uint8List?;
          final object = Genre(name: nameParam, picture: pictureParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<Genre>(
              object.songs,
              store,
              obx_int.RelInfo<Song>.toOneBacklink(
                  9, object.id, (Song srcObject) => srcObject.genre));
          return object;
        }),
    Song: obx_int.EntityDefinition<Song>(
        model: _entities[3],
        toOneRelations: (Song object) =>
            [object.artist, object.album, object.genre],
        toManyRelations: (Song object) => {
              obx_int.RelInfo<MusicColor>.toOneBacklink(
                      2, object.id, (MusicColor srcObject) => srcObject.song):
                  object.colors
            },
        getId: (Song object) => object.id,
        setId: (Song object, int id) {
          object.id = id;
        },
        objectToFB: (Song object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final pathOffset = fbb.writeString(object.path);
          final pictureOffset = object.picture == null
              ? null
              : fbb.writeListInt8(object.picture!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, pathOffset);
          fbb.addInt64(3, object.duration);
          fbb.addInt64(4, object.year);
          fbb.addOffset(5, pictureOffset);
          fbb.addInt64(6, object.artist.targetId);
          fbb.addInt64(7, object.album.targetId);
          fbb.addInt64(8, object.genre.targetId);
          fbb.addInt64(9, object.modified?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final modifiedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final pictureParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 14) as Uint8List?;
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final durationParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final modifiedParam = modifiedValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(modifiedValue);
          final yearParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = Song(
              path: pathParam,
              picture: pictureParam,
              title: titleParam,
              duration: durationParam,
              modified: modifiedParam,
              year: yearParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.artist.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.artist.attach(store);
          object.album.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.album.attach(store);
          object.genre.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.genre.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Song>(
              object.colors,
              store,
              obx_int.RelInfo<MusicColor>.toOneBacklink(
                  2, object.id, (MusicColor srcObject) => srcObject.song));
          return object;
        }),
    MusicColor: obx_int.EntityDefinition<MusicColor>(
        model: _entities[4],
        toOneRelations: (MusicColor object) => [object.song],
        toManyRelations: (MusicColor object) => {},
        getId: (MusicColor object) => object.id,
        setId: (MusicColor object, int id) {
          object.id = id;
        },
        objectToFB: (MusicColor object, fb.Builder fbb) {
          final dbThemeOffset = fbb.writeString(object.dbTheme);
          final dbPaletteOffset = fbb.writeString(object.dbPalette);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.song.targetId);
          fbb.addInt64(2, object.dbBackground);
          fbb.addInt64(3, object.dbText);
          fbb.addInt64(4, object.dbIcon);
          fbb.addInt64(5, object.dbInactive);
          fbb.addInt64(6, object.dbOther);
          fbb.addOffset(7, dbThemeOffset);
          fbb.addOffset(8, dbPaletteOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dbBackgroundParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final dbTextParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final dbIconParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final dbOtherParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final dbInactiveParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final dbPaletteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final dbThemeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = MusicColor(
              dbBackground: dbBackgroundParam,
              dbText: dbTextParam,
              dbIcon: dbIconParam,
              dbOther: dbOtherParam,
              dbInactive: dbInactiveParam,
              dbPalette: dbPaletteParam,
              dbTheme: dbThemeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.song.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.song.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Album] entity fields to define ObjectBox queries.
class Album_ {
  /// See [Album.id].
  static final id = obx.QueryIntegerProperty<Album>(_entities[0].properties[0]);

  /// See [Album.name].
  static final name =
      obx.QueryStringProperty<Album>(_entities[0].properties[1]);

  /// See [Album.picture].
  static final picture =
      obx.QueryByteVectorProperty<Album>(_entities[0].properties[2]);

  /// See [Album.artist].
  static final artist =
      obx.QueryRelationToOne<Album, Artist>(_entities[0].properties[3]);

  /// see [Album.songs]
  static final songs = obx.QueryBacklinkToMany<Song, Album>(Song_.album);
}

/// [Artist] entity fields to define ObjectBox queries.
class Artist_ {
  /// See [Artist.id].
  static final id =
      obx.QueryIntegerProperty<Artist>(_entities[1].properties[0]);

  /// See [Artist.name].
  static final name =
      obx.QueryStringProperty<Artist>(_entities[1].properties[1]);

  /// See [Artist.picture].
  static final picture =
      obx.QueryByteVectorProperty<Artist>(_entities[1].properties[2]);

  /// see [Artist.songs]
  static final songs = obx.QueryBacklinkToMany<Song, Artist>(Song_.artist);

  /// see [Artist.albums]
  static final albums = obx.QueryBacklinkToMany<Album, Artist>(Album_.artist);
}

/// [Genre] entity fields to define ObjectBox queries.
class Genre_ {
  /// See [Genre.id].
  static final id = obx.QueryIntegerProperty<Genre>(_entities[2].properties[0]);

  /// See [Genre.name].
  static final name =
      obx.QueryStringProperty<Genre>(_entities[2].properties[1]);

  /// See [Genre.picture].
  static final picture =
      obx.QueryByteVectorProperty<Genre>(_entities[2].properties[2]);

  /// see [Genre.songs]
  static final songs = obx.QueryBacklinkToMany<Song, Genre>(Song_.genre);
}

/// [Song] entity fields to define ObjectBox queries.
class Song_ {
  /// See [Song.id].
  static final id = obx.QueryIntegerProperty<Song>(_entities[3].properties[0]);

  /// See [Song.title].
  static final title =
      obx.QueryStringProperty<Song>(_entities[3].properties[1]);

  /// See [Song.path].
  static final path = obx.QueryStringProperty<Song>(_entities[3].properties[2]);

  /// See [Song.duration].
  static final duration =
      obx.QueryIntegerProperty<Song>(_entities[3].properties[3]);

  /// See [Song.year].
  static final year =
      obx.QueryIntegerProperty<Song>(_entities[3].properties[4]);

  /// See [Song.picture].
  static final picture =
      obx.QueryByteVectorProperty<Song>(_entities[3].properties[5]);

  /// See [Song.artist].
  static final artist =
      obx.QueryRelationToOne<Song, Artist>(_entities[3].properties[6]);

  /// See [Song.album].
  static final album =
      obx.QueryRelationToOne<Song, Album>(_entities[3].properties[7]);

  /// See [Song.genre].
  static final genre =
      obx.QueryRelationToOne<Song, Genre>(_entities[3].properties[8]);

  /// See [Song.modified].
  static final modified =
      obx.QueryDateProperty<Song>(_entities[3].properties[9]);

  /// see [Song.colors]
  static final colors =
      obx.QueryBacklinkToMany<MusicColor, Song>(MusicColor_.song);
}

/// [MusicColor] entity fields to define ObjectBox queries.
class MusicColor_ {
  /// See [MusicColor.id].
  static final id =
      obx.QueryIntegerProperty<MusicColor>(_entities[4].properties[0]);

  /// See [MusicColor.song].
  static final song =
      obx.QueryRelationToOne<MusicColor, Song>(_entities[4].properties[1]);

  /// See [MusicColor.dbBackground].
  static final dbBackground =
      obx.QueryIntegerProperty<MusicColor>(_entities[4].properties[2]);

  /// See [MusicColor.dbText].
  static final dbText =
      obx.QueryIntegerProperty<MusicColor>(_entities[4].properties[3]);

  /// See [MusicColor.dbIcon].
  static final dbIcon =
      obx.QueryIntegerProperty<MusicColor>(_entities[4].properties[4]);

  /// See [MusicColor.dbInactive].
  static final dbInactive =
      obx.QueryIntegerProperty<MusicColor>(_entities[4].properties[5]);

  /// See [MusicColor.dbOther].
  static final dbOther =
      obx.QueryIntegerProperty<MusicColor>(_entities[4].properties[6]);

  /// See [MusicColor.dbTheme].
  static final dbTheme =
      obx.QueryStringProperty<MusicColor>(_entities[4].properties[7]);

  /// See [MusicColor.dbPalette].
  static final dbPalette =
      obx.QueryStringProperty<MusicColor>(_entities[4].properties[8]);
}
