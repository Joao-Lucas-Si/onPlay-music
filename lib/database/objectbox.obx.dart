// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models/album.dart';
import '../models/artist.dart';
import '../models/genre.dart';
import '../models/music_color.dart';
import '../models/playlist.dart';
import '../models/settings/interface.dart';
import '../models/settings/layout.dart';
import '../models/settings/player.dart';
import '../models/settings/settings.dart';
import '../models/settings/share.dart';
import '../models/settings/source.dart';
import '../models/song.dart';
import '../models/user_profile.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8440881531056850493),
      name: 'Album',
      lastPropertyId: const obx_int.IdUid(4, 961771146083296052),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1230007991343479423),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2610160443812700902),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 961771146083296052),
            name: 'artistId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 4214596295991764306),
            relationTarget: 'Artist')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'songs', srcEntity: 'Song', srcField: 'album')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7532154297802897771),
      name: 'Artist',
      lastPropertyId: const obx_int.IdUid(3, 1475912299933615236),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6414358718615360251),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 923523403980957935),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'songs', srcEntity: 'Song', srcField: 'artist'),
        obx_int.ModelBacklink(
            name: 'albums', srcEntity: 'Album', srcField: 'artist')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5323655028716215377),
      name: 'Genre',
      lastPropertyId: const obx_int.IdUid(3, 5738142651511766062),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3243251279445941220),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4258590337348061470),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'songs', srcEntity: 'Song', srcField: 'genre')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6497590176427579550),
      name: 'Song',
      lastPropertyId: const obx_int.IdUid(13, 4939538193196402726),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 937970576238746613),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1780087795157600179),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2587030695437218407),
            name: 'path',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6120740321289834035),
            name: 'duration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4704007675093067046),
            name: 'year',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8200934840536006746),
            name: 'picture',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6646752320738693818),
            name: 'artistId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 2394529475630706640),
            relationTarget: 'Artist'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 9163309267891146034),
            name: 'albumId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 5049358481360515102),
            relationTarget: 'Album'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1313285635622323818),
            name: 'genreId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 7565656267712023963),
            relationTarget: 'Genre'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2942306982142154184),
            name: 'modified',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2475855671905137680),
            name: 'isOnline',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3786932038971008213),
            name: 'pictureMimeType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4939538193196402726),
            name: 'preferredColorsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(14, 6389748139120428627),
            relationTarget: 'MusicColor')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 7690569768755154711),
            name: 'colors',
            targetId: const obx_int.IdUid(5, 8869230512487373120))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 8869230512487373120),
      name: 'MusicColor',
      lastPropertyId: const obx_int.IdUid(9, 3465104969620754882),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5558345813382195562),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6413553713852324861),
            name: 'dbBackground',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7279141139604890194),
            name: 'dbText',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2265012943410117396),
            name: 'dbIcon',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7522163142601365829),
            name: 'dbInactive',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6672391655949655437),
            name: 'dbOther',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5009152402973785137),
            name: 'dbTheme',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3465104969620754882),
            name: 'dbPalette',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 2934314663694208747),
      name: 'Playlist',
      lastPropertyId: const obx_int.IdUid(3, 3125077617453859936),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3828699003463814072),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6501151964883751669),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3125077617453859936),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 7788313485866779765),
            relationTarget: 'UserProfile')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 1714640651402914561),
            name: 'songs',
            targetId: const obx_int.IdUid(4, 6497590176427579550))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 88431105930997367),
      name: 'DatabasePlayerSettings',
      lastPropertyId: const obx_int.IdUid(4, 1848556570147454257),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6200573323939050195),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5519772685723583622),
            name: 'velocityStep',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7999809434121947628),
            name: 'maxVelocity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1848556570147454257),
            name: 'volumeStep',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 6346989537120360199),
      name: 'DatabaseSettings',
      lastPropertyId: const obx_int.IdUid(7, 5118955864889774580),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5492649879089754200),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 786553103394085435),
            name: 'recentRange',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6023788294185895299),
            name: 'interfaceId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 4243986190520251430),
            relationTarget: 'DatabaseInterfaceSettings'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9125839004558863944),
            name: 'shareId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 7948895637201857902),
            relationTarget: 'DatabaseShareSettings'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4794609617023008456),
            name: 'layoutId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(9, 2549234341094408931),
            relationTarget: 'DatabaseLayoutSettings'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1569665513455864168),
            name: 'playerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(10, 4417538046858357665),
            relationTarget: 'DatabasePlayerSettings'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5118955864889774580),
            name: 'sourceId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(13, 6356786125335292857),
            relationTarget: 'DatabaseSourceSettings')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 2815627667814007811),
      name: 'DatabaseShareSettings',
      lastPropertyId: const obx_int.IdUid(2, 6078732247047000981),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1656930692021190658),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6078732247047000981),
            name: 'editorUrls',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 1713575689177859023),
      name: 'UserProfile',
      lastPropertyId: const obx_int.IdUid(6, 1668568879331343734),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7325430212055432722),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3552461870333706012),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(11, 8368297415295655801)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9185213372745912318),
            name: 'banner',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4096865057018024385),
            name: 'photo',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6876681336544452087),
            name: 'current',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1668568879331343734),
            name: 'settingsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(12, 8877211369580756881),
            relationTarget: 'DatabaseSettings')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'playlists', srcEntity: 'Playlist', srcField: 'user')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 1783439183368047241),
      name: 'DatabaseLayoutSettings',
      lastPropertyId: const obx_int.IdUid(11, 7583224691474521751),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6329027414350276675),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6035222152268694810),
            name: 'dbContainerStyle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5453335989415707779),
            name: 'dbHiddenScreens',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1466720086861744307),
            name: 'dbVolumeType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7291842168322318469),
            name: 'dbPlayerElements',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2944878772244270136),
            name: 'songGridItems',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 658664062384816679),
            name: 'artistGridItems',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7240781589085401520),
            name: 'genreGridItems',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7606295383735195973),
            name: 'albumGridItems',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7583224691474521751),
            name: 'playlistGridItems',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 4472535590567062791),
            name: 'lateralElements',
            targetId: const obx_int.IdUid(12, 107265284620181940))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 107265284620181940),
      name: 'LateralPlayerElement',
      lastPropertyId: const obx_int.IdUid(3, 5228668252609080612),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8631266473723612824),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3187884672471329317),
            name: 'dbElement',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5228668252609080612),
            name: 'dbPosition',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 533300879031493817),
      name: 'DatabaseInterfaceSettings',
      lastPropertyId: const obx_int.IdUid(27, 6277370637889217542),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6501473581865677363),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4353151855002356512),
            name: 'showChangeTheme',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1058604158813073426),
            name: 'showChangePalette',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7143693882026609607),
            name: 'themeBasedOnTime',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4805747310418116613),
            name: 'dbTitleType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5005591584744347295),
            name: 'dbProgressType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6652327034148461698),
            name: 'dbColorPalette',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1914477881654021767),
            name: 'dbColorTheme',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6799555786810443086),
            name: 'dbPictureType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2687349597221271493),
            name: 'dbControlsType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1326573167591469492),
            name: 'dbBaseTheme',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4217658101655518446),
            name: 'coloredSongCard',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6938215218188448593),
            name: 'coloredAlbumCard',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 6710049825364518782),
            name: 'coloredGenreCard',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 7771869454415669964),
            name: 'coloredArtistCard',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 5678620975604039095),
            name: 'coloredPlaylistCard',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 1043290662866124199),
            name: 'dbSongCardStyle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 4199345951390654570),
            name: 'dbAlbumCardStyle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 5359427239481035302),
            name: 'dbArtistCardStyle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 2476091790950636473),
            name: 'dbPlaylistCardStyle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 8730058587949986835),
            name: 'dbGenreCardStyle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 4501206641889980179),
            name: 'themeChangeTimer',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 3717689960032247305),
            name: 'dbAlbumRelationStyle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 2909805147225544902),
            name: 'dbGenreRelationStyle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 6277370637889217542),
            name: 'dbArtistRelationStyle',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 6347683925110699099),
      name: 'DatabaseSourceSettings',
      lastPropertyId: const obx_int.IdUid(2, 533927472569115788),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8026814027408079714),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 533927472569115788),
            name: 'invidiousInstances',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(14, 6347683925110699099),
      lastIndexId: const obx_int.IdUid(14, 6389748139120428627),
      lastRelationId: const obx_int.IdUid(3, 7690569768755154711),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [8923944927584716313],
      retiredPropertyUids: const [
        353378994051547501,
        5182564456990978250,
        1475912299933615236,
        5738142651511766062,
        7850994761262333986,
        4325039813061252695,
        766543068697314630
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Album: obx_int.EntityDefinition<Album>(
        model: _entities[0],
        toOneRelations: (Album object) => [object.artist],
        toManyRelations: (Album object) => {
              obx_int.RelInfo<Song>.toOneBacklink(
                      8, object.id, (Song srcObject) => srcObject.album):
                  object.songs
            },
        getId: (Album object) => object.id,
        setId: (Album object, int id) {
          object.id = id;
        },
        objectToFB: (Album object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(3, object.artist.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Album(name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.artist.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.artist.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Album>(
              object.songs,
              store,
              obx_int.RelInfo<Song>.toOneBacklink(
                  8, object.id, (Song srcObject) => srcObject.album));
          return object;
        }),
    Artist: obx_int.EntityDefinition<Artist>(
        model: _entities[1],
        toOneRelations: (Artist object) => [],
        toManyRelations: (Artist object) => {
              obx_int.RelInfo<Song>.toOneBacklink(
                      7, object.id, (Song srcObject) => srcObject.artist):
                  object.songs,
              obx_int.RelInfo<Album>.toOneBacklink(
                      4, object.id, (Album srcObject) => srcObject.artist):
                  object.albums
            },
        getId: (Artist object) => object.id,
        setId: (Artist object, int id) {
          object.id = id;
        },
        objectToFB: (Artist object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Artist(name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<Artist>(
              object.songs,
              store,
              obx_int.RelInfo<Song>.toOneBacklink(
                  7, object.id, (Song srcObject) => srcObject.artist));
          obx_int.InternalToManyAccess.setRelInfo<Artist>(
              object.albums,
              store,
              obx_int.RelInfo<Album>.toOneBacklink(
                  4, object.id, (Album srcObject) => srcObject.artist));
          return object;
        }),
    Genre: obx_int.EntityDefinition<Genre>(
        model: _entities[2],
        toOneRelations: (Genre object) => [],
        toManyRelations: (Genre object) => {
              obx_int.RelInfo<Song>.toOneBacklink(
                      9, object.id, (Song srcObject) => srcObject.genre):
                  object.songs
            },
        getId: (Genre object) => object.id,
        setId: (Genre object, int id) {
          object.id = id;
        },
        objectToFB: (Genre object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Genre(name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<Genre>(
              object.songs,
              store,
              obx_int.RelInfo<Song>.toOneBacklink(
                  9, object.id, (Song srcObject) => srcObject.genre));
          return object;
        }),
    Song: obx_int.EntityDefinition<Song>(
        model: _entities[3],
        toOneRelations: (Song object) =>
            [object.artist, object.album, object.genre, object.preferredColors],
        toManyRelations: (Song object) =>
            {obx_int.RelInfo<Song>.toMany(3, object.id): object.colors},
        getId: (Song object) => object.id,
        setId: (Song object, int id) {
          object.id = id;
        },
        objectToFB: (Song object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final pathOffset = fbb.writeString(object.path);
          final pictureOffset = object.picture == null
              ? null
              : fbb.writeListInt8(object.picture!);
          final pictureMimeTypeOffset = object.pictureMimeType == null
              ? null
              : fbb.writeString(object.pictureMimeType!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, pathOffset);
          fbb.addInt64(3, object.duration);
          fbb.addInt64(4, object.year);
          fbb.addOffset(5, pictureOffset);
          fbb.addInt64(6, object.artist.targetId);
          fbb.addInt64(7, object.album.targetId);
          fbb.addInt64(8, object.genre.targetId);
          fbb.addInt64(9, object.modified?.millisecondsSinceEpoch);
          fbb.addBool(10, object.isOnline);
          fbb.addOffset(11, pictureMimeTypeOffset);
          fbb.addInt64(12, object.preferredColors.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final modifiedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final pictureParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 14) as Uint8List?;
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pictureMimeTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final isOnlineParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final durationParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final modifiedParam = modifiedValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(modifiedValue);
          final yearParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = Song(
              path: pathParam,
              picture: pictureParam,
              title: titleParam,
              pictureMimeType: pictureMimeTypeParam,
              isOnline: isOnlineParam,
              duration: durationParam,
              modified: modifiedParam,
              year: yearParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.artist.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.artist.attach(store);
          object.album.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.album.attach(store);
          object.genre.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.genre.attach(store);
          object.preferredColors.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.preferredColors.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Song>(
              object.colors, store, obx_int.RelInfo<Song>.toMany(3, object.id));
          return object;
        }),
    MusicColor: obx_int.EntityDefinition<MusicColor>(
        model: _entities[4],
        toOneRelations: (MusicColor object) => [],
        toManyRelations: (MusicColor object) => {},
        getId: (MusicColor object) => object.id,
        setId: (MusicColor object, int id) {
          object.id = id;
        },
        objectToFB: (MusicColor object, fb.Builder fbb) {
          final dbThemeOffset = fbb.writeString(object.dbTheme);
          final dbPaletteOffset = fbb.writeString(object.dbPalette);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.dbBackground);
          fbb.addInt64(3, object.dbText);
          fbb.addInt64(4, object.dbIcon);
          fbb.addInt64(5, object.dbInactive);
          fbb.addInt64(6, object.dbOther);
          fbb.addOffset(7, dbThemeOffset);
          fbb.addOffset(8, dbPaletteOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dbBackgroundParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final dbTextParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final dbIconParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final dbOtherParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final dbInactiveParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final dbPaletteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final dbThemeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = MusicColor(
              dbBackground: dbBackgroundParam,
              dbText: dbTextParam,
              dbIcon: dbIconParam,
              dbOther: dbOtherParam,
              dbInactive: dbInactiveParam,
              dbPalette: dbPaletteParam,
              dbTheme: dbThemeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Playlist: obx_int.EntityDefinition<Playlist>(
        model: _entities[5],
        toOneRelations: (Playlist object) => [object.user],
        toManyRelations: (Playlist object) =>
            {obx_int.RelInfo<Playlist>.toMany(1, object.id): object.songs},
        getId: (Playlist object) => object.id,
        setId: (Playlist object, int id) {
          object.id = id;
        },
        objectToFB: (Playlist object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Playlist(name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.user.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Playlist>(object.songs, store,
              obx_int.RelInfo<Playlist>.toMany(1, object.id));
          return object;
        }),
    DatabasePlayerSettings: obx_int.EntityDefinition<DatabasePlayerSettings>(
        model: _entities[6],
        toOneRelations: (DatabasePlayerSettings object) => [],
        toManyRelations: (DatabasePlayerSettings object) => {},
        getId: (DatabasePlayerSettings object) => object.id,
        setId: (DatabasePlayerSettings object, int id) {
          object.id = id;
        },
        objectToFB: (DatabasePlayerSettings object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.velocityStep);
          fbb.addInt64(2, object.maxVelocity);
          fbb.addFloat64(3, object.volumeStep);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final maxVelocityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final velocityStepParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final volumeStepParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = DatabasePlayerSettings(
              maxVelocity: maxVelocityParam,
              velocityStep: velocityStepParam,
              volumeStep: volumeStepParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    DatabaseSettings: obx_int.EntityDefinition<DatabaseSettings>(
        model: _entities[7],
        toOneRelations: (DatabaseSettings object) => [
              object.interface,
              object.share,
              object.layout,
              object.player,
              object.source
            ],
        toManyRelations: (DatabaseSettings object) => {},
        getId: (DatabaseSettings object) => object.id,
        setId: (DatabaseSettings object, int id) {
          object.id = id;
        },
        objectToFB: (DatabaseSettings object, fb.Builder fbb) {
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.recentRange);
          fbb.addInt64(2, object.interface.targetId);
          fbb.addInt64(3, object.share.targetId);
          fbb.addInt64(4, object.layout.targetId);
          fbb.addInt64(5, object.player.targetId);
          fbb.addInt64(6, object.source.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final recentRangeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = DatabaseSettings(recentRange: recentRangeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.interface.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.interface.attach(store);
          object.share.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.share.attach(store);
          object.layout.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.layout.attach(store);
          object.player.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.player.attach(store);
          object.source.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.source.attach(store);
          return object;
        }),
    DatabaseShareSettings: obx_int.EntityDefinition<DatabaseShareSettings>(
        model: _entities[8],
        toOneRelations: (DatabaseShareSettings object) => [],
        toManyRelations: (DatabaseShareSettings object) => {},
        getId: (DatabaseShareSettings object) => object.id,
        setId: (DatabaseShareSettings object, int id) {
          object.id = id;
        },
        objectToFB: (DatabaseShareSettings object, fb.Builder fbb) {
          final editorUrlsOffset = fbb.writeList(
              object.editorUrls.map(fbb.writeString).toList(growable: false));
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, editorUrlsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final editorUrlsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 6, []);
          final object = DatabaseShareSettings(editorUrls: editorUrlsParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    UserProfile: obx_int.EntityDefinition<UserProfile>(
        model: _entities[9],
        toOneRelations: (UserProfile object) => [object.settings],
        toManyRelations: (UserProfile object) => {
              obx_int.RelInfo<Playlist>.toOneBacklink(
                      3, object.id, (Playlist srcObject) => srcObject.user):
                  object.playlists
            },
        getId: (UserProfile object) => object.id,
        setId: (UserProfile object, int id) {
          object.id = id;
        },
        objectToFB: (UserProfile object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final bannerOffset =
              object.banner == null ? null : fbb.writeListInt8(object.banner!);
          final photoOffset =
              object.photo == null ? null : fbb.writeListInt8(object.photo!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, bannerOffset);
          fbb.addOffset(3, photoOffset);
          fbb.addBool(4, object.current);
          fbb.addInt64(5, object.settings.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final bannerParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 8) as Uint8List?;
          final photoParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 10) as Uint8List?;
          final currentParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final object = UserProfile(
              name: nameParam,
              banner: bannerParam,
              photo: photoParam,
              current: currentParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.settings.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.settings.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<UserProfile>(
              object.playlists,
              store,
              obx_int.RelInfo<Playlist>.toOneBacklink(
                  3, object.id, (Playlist srcObject) => srcObject.user));
          return object;
        }),
    DatabaseLayoutSettings: obx_int.EntityDefinition<DatabaseLayoutSettings>(
        model: _entities[10],
        toOneRelations: (DatabaseLayoutSettings object) => [],
        toManyRelations: (DatabaseLayoutSettings object) => {
              obx_int.RelInfo<DatabaseLayoutSettings>.toMany(2, object.id):
                  object.lateralElements
            },
        getId: (DatabaseLayoutSettings object) => object.id,
        setId: (DatabaseLayoutSettings object, int id) {
          object.id = id;
        },
        objectToFB: (DatabaseLayoutSettings object, fb.Builder fbb) {
          final dbContainerStyleOffset =
              fbb.writeString(object.dbContainerStyle);
          final dbHiddenScreensOffset = fbb.writeList(object.dbHiddenScreens
              .map(fbb.writeString)
              .toList(growable: false));
          final dbVolumeTypeOffset = fbb.writeString(object.dbVolumeType);
          final dbPlayerElementsOffset = fbb.writeList(object.dbPlayerElements
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dbContainerStyleOffset);
          fbb.addOffset(3, dbHiddenScreensOffset);
          fbb.addOffset(4, dbVolumeTypeOffset);
          fbb.addOffset(5, dbPlayerElementsOffset);
          fbb.addInt64(6, object.songGridItems);
          fbb.addInt64(7, object.artistGridItems);
          fbb.addInt64(8, object.genreGridItems);
          fbb.addInt64(9, object.albumGridItems);
          fbb.addInt64(10, object.playlistGridItems);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DatabaseLayoutSettings()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dbContainerStyle = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..dbHiddenScreens = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 10, [])
            ..dbVolumeType = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..dbPlayerElements = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 14, [])
            ..songGridItems =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..artistGridItems =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..genreGridItems =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)
            ..albumGridItems =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)
            ..playlistGridItems =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          obx_int.InternalToManyAccess.setRelInfo<DatabaseLayoutSettings>(
              object.lateralElements,
              store,
              obx_int.RelInfo<DatabaseLayoutSettings>.toMany(2, object.id));
          return object;
        }),
    LateralPlayerElement: obx_int.EntityDefinition<LateralPlayerElement>(
        model: _entities[11],
        toOneRelations: (LateralPlayerElement object) => [],
        toManyRelations: (LateralPlayerElement object) => {},
        getId: (LateralPlayerElement object) => object.id,
        setId: (LateralPlayerElement object, int id) {
          object.id = id;
        },
        objectToFB: (LateralPlayerElement object, fb.Builder fbb) {
          final dbElementOffset = fbb.writeString(object.dbElement);
          final dbPositionOffset = fbb.writeString(object.dbPosition);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dbElementOffset);
          fbb.addOffset(2, dbPositionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dbPositionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final dbElementParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = LateralPlayerElement(
              dbPosition: dbPositionParam, dbElement: dbElementParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    DatabaseInterfaceSettings: obx_int.EntityDefinition<
            DatabaseInterfaceSettings>(
        model: _entities[12],
        toOneRelations: (DatabaseInterfaceSettings object) => [],
        toManyRelations: (DatabaseInterfaceSettings object) => {},
        getId: (DatabaseInterfaceSettings object) => object.id,
        setId: (DatabaseInterfaceSettings object, int id) {
          object.id = id;
        },
        objectToFB: (DatabaseInterfaceSettings object, fb.Builder fbb) {
          final dbTitleTypeOffset = fbb.writeString(object.dbTitleType);
          final dbProgressTypeOffset = fbb.writeString(object.dbProgressType);
          final dbColorPaletteOffset = fbb.writeString(object.dbColorPalette);
          final dbColorThemeOffset = fbb.writeString(object.dbColorTheme);
          final dbPictureTypeOffset = fbb.writeString(object.dbPictureType);
          final dbControlsTypeOffset = fbb.writeString(object.dbControlsType);
          final dbBaseThemeOffset = fbb.writeString(object.dbBaseTheme);
          final dbSongCardStyleOffset = fbb.writeString(object.dbSongCardStyle);
          final dbAlbumCardStyleOffset =
              fbb.writeString(object.dbAlbumCardStyle);
          final dbArtistCardStyleOffset =
              fbb.writeString(object.dbArtistCardStyle);
          final dbPlaylistCardStyleOffset =
              fbb.writeString(object.dbPlaylistCardStyle);
          final dbGenreCardStyleOffset =
              fbb.writeString(object.dbGenreCardStyle);
          final dbAlbumRelationStyleOffset =
              fbb.writeString(object.dbAlbumRelationStyle);
          final dbGenreRelationStyleOffset =
              fbb.writeString(object.dbGenreRelationStyle);
          final dbArtistRelationStyleOffset =
              fbb.writeString(object.dbArtistRelationStyle);
          fbb.startTable(28);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.showChangeTheme);
          fbb.addBool(2, object.showChangePalette);
          fbb.addBool(3, object.themeBasedOnTime);
          fbb.addOffset(5, dbTitleTypeOffset);
          fbb.addOffset(6, dbProgressTypeOffset);
          fbb.addOffset(7, dbColorPaletteOffset);
          fbb.addOffset(8, dbColorThemeOffset);
          fbb.addOffset(9, dbPictureTypeOffset);
          fbb.addOffset(10, dbControlsTypeOffset);
          fbb.addOffset(11, dbBaseThemeOffset);
          fbb.addBool(12, object.coloredSongCard);
          fbb.addBool(13, object.coloredAlbumCard);
          fbb.addBool(14, object.coloredGenreCard);
          fbb.addBool(15, object.coloredArtistCard);
          fbb.addBool(16, object.coloredPlaylistCard);
          fbb.addOffset(17, dbSongCardStyleOffset);
          fbb.addOffset(18, dbAlbumCardStyleOffset);
          fbb.addOffset(19, dbArtistCardStyleOffset);
          fbb.addOffset(20, dbPlaylistCardStyleOffset);
          fbb.addOffset(21, dbGenreCardStyleOffset);
          fbb.addInt64(22, object.themeChangeTimer);
          fbb.addOffset(23, dbAlbumRelationStyleOffset);
          fbb.addOffset(24, dbGenreRelationStyleOffset);
          fbb.addOffset(26, dbArtistRelationStyleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final showChangePaletteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final showChangeThemeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
          final themeBasedOnTimeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final dbControlsTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final dbPictureTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final dbColorPaletteParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final dbTitleTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final dbProgressTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final dbBaseThemeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, '');
          final dbColorThemeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final coloredAlbumCardParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 30, false);
          final coloredGenreCardParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 32, false);
          final themeChangeTimerParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 48);
          final coloredArtistCardParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 34, false);
          final coloredPlaylistCardParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 36, false);
          final coloredSongCardParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final dbSongCardStyleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 38, '');
          final dbAlbumCardStyleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 40, '');
          final dbGenreCardStyleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 46, '');
          final dbArtistCardStyleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 42, '');
          final dbPlaylistCardStyleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 44, '');
          final dbArtistRelationStyleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 56, '');
          final dbAlbumRelationStyleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 50, '');
          final dbGenreRelationStyleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 52, '');
          final object = DatabaseInterfaceSettings(
              showChangePalette: showChangePaletteParam,
              showChangeTheme: showChangeThemeParam,
              themeBasedOnTime: themeBasedOnTimeParam,
              dbControlsType: dbControlsTypeParam,
              dbPictureType: dbPictureTypeParam,
              dbColorPalette: dbColorPaletteParam,
              dbTitleType: dbTitleTypeParam,
              dbProgressType: dbProgressTypeParam,
              dbBaseTheme: dbBaseThemeParam,
              dbColorTheme: dbColorThemeParam,
              coloredAlbumCard: coloredAlbumCardParam,
              coloredGenreCard: coloredGenreCardParam,
              themeChangeTimer: themeChangeTimerParam,
              coloredArtistCard: coloredArtistCardParam,
              coloredPlaylistCard: coloredPlaylistCardParam,
              coloredSongCard: coloredSongCardParam,
              dbSongCardStyle: dbSongCardStyleParam,
              dbAlbumCardStyle: dbAlbumCardStyleParam,
              dbGenreCardStyle: dbGenreCardStyleParam,
              dbArtistCardStyle: dbArtistCardStyleParam,
              dbPlaylistCardStyle: dbPlaylistCardStyleParam,
              dbArtistRelationStyle: dbArtistRelationStyleParam,
              dbAlbumRelationStyle: dbAlbumRelationStyleParam,
              dbGenreRelationStyle: dbGenreRelationStyleParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    DatabaseSourceSettings: obx_int.EntityDefinition<DatabaseSourceSettings>(
        model: _entities[13],
        toOneRelations: (DatabaseSourceSettings object) => [],
        toManyRelations: (DatabaseSourceSettings object) => {},
        getId: (DatabaseSourceSettings object) => object.id,
        setId: (DatabaseSourceSettings object, int id) {
          object.id = id;
        },
        objectToFB: (DatabaseSourceSettings object, fb.Builder fbb) {
          final invidiousInstancesOffset = fbb.writeList(object
              .invidiousInstances
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, invidiousInstancesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final invidiousInstancesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 6, []);
          final object = DatabaseSourceSettings(
              invidiousInstances: invidiousInstancesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Album] entity fields to define ObjectBox queries.
class Album_ {
  /// See [Album.id].
  static final id = obx.QueryIntegerProperty<Album>(_entities[0].properties[0]);

  /// See [Album.name].
  static final name =
      obx.QueryStringProperty<Album>(_entities[0].properties[1]);

  /// See [Album.artist].
  static final artist =
      obx.QueryRelationToOne<Album, Artist>(_entities[0].properties[2]);

  /// see [Album.songs]
  static final songs = obx.QueryBacklinkToMany<Song, Album>(Song_.album);
}

/// [Artist] entity fields to define ObjectBox queries.
class Artist_ {
  /// See [Artist.id].
  static final id =
      obx.QueryIntegerProperty<Artist>(_entities[1].properties[0]);

  /// See [Artist.name].
  static final name =
      obx.QueryStringProperty<Artist>(_entities[1].properties[1]);

  /// see [Artist.songs]
  static final songs = obx.QueryBacklinkToMany<Song, Artist>(Song_.artist);

  /// see [Artist.albums]
  static final albums = obx.QueryBacklinkToMany<Album, Artist>(Album_.artist);
}

/// [Genre] entity fields to define ObjectBox queries.
class Genre_ {
  /// See [Genre.id].
  static final id = obx.QueryIntegerProperty<Genre>(_entities[2].properties[0]);

  /// See [Genre.name].
  static final name =
      obx.QueryStringProperty<Genre>(_entities[2].properties[1]);

  /// see [Genre.songs]
  static final songs = obx.QueryBacklinkToMany<Song, Genre>(Song_.genre);
}

/// [Song] entity fields to define ObjectBox queries.
class Song_ {
  /// See [Song.id].
  static final id = obx.QueryIntegerProperty<Song>(_entities[3].properties[0]);

  /// See [Song.title].
  static final title =
      obx.QueryStringProperty<Song>(_entities[3].properties[1]);

  /// See [Song.path].
  static final path = obx.QueryStringProperty<Song>(_entities[3].properties[2]);

  /// See [Song.duration].
  static final duration =
      obx.QueryIntegerProperty<Song>(_entities[3].properties[3]);

  /// See [Song.year].
  static final year =
      obx.QueryIntegerProperty<Song>(_entities[3].properties[4]);

  /// See [Song.picture].
  static final picture =
      obx.QueryByteVectorProperty<Song>(_entities[3].properties[5]);

  /// See [Song.artist].
  static final artist =
      obx.QueryRelationToOne<Song, Artist>(_entities[3].properties[6]);

  /// See [Song.album].
  static final album =
      obx.QueryRelationToOne<Song, Album>(_entities[3].properties[7]);

  /// See [Song.genre].
  static final genre =
      obx.QueryRelationToOne<Song, Genre>(_entities[3].properties[8]);

  /// See [Song.modified].
  static final modified =
      obx.QueryDateProperty<Song>(_entities[3].properties[9]);

  /// See [Song.isOnline].
  static final isOnline =
      obx.QueryBooleanProperty<Song>(_entities[3].properties[10]);

  /// See [Song.pictureMimeType].
  static final pictureMimeType =
      obx.QueryStringProperty<Song>(_entities[3].properties[11]);

  /// See [Song.preferredColors].
  static final preferredColors =
      obx.QueryRelationToOne<Song, MusicColor>(_entities[3].properties[12]);

  /// see [Song.colors]
  static final colors =
      obx.QueryRelationToMany<Song, MusicColor>(_entities[3].relations[0]);
}

/// [MusicColor] entity fields to define ObjectBox queries.
class MusicColor_ {
  /// See [MusicColor.id].
  static final id =
      obx.QueryIntegerProperty<MusicColor>(_entities[4].properties[0]);

  /// See [MusicColor.dbBackground].
  static final dbBackground =
      obx.QueryIntegerProperty<MusicColor>(_entities[4].properties[1]);

  /// See [MusicColor.dbText].
  static final dbText =
      obx.QueryIntegerProperty<MusicColor>(_entities[4].properties[2]);

  /// See [MusicColor.dbIcon].
  static final dbIcon =
      obx.QueryIntegerProperty<MusicColor>(_entities[4].properties[3]);

  /// See [MusicColor.dbInactive].
  static final dbInactive =
      obx.QueryIntegerProperty<MusicColor>(_entities[4].properties[4]);

  /// See [MusicColor.dbOther].
  static final dbOther =
      obx.QueryIntegerProperty<MusicColor>(_entities[4].properties[5]);

  /// See [MusicColor.dbTheme].
  static final dbTheme =
      obx.QueryStringProperty<MusicColor>(_entities[4].properties[6]);

  /// See [MusicColor.dbPalette].
  static final dbPalette =
      obx.QueryStringProperty<MusicColor>(_entities[4].properties[7]);
}

/// [Playlist] entity fields to define ObjectBox queries.
class Playlist_ {
  /// See [Playlist.id].
  static final id =
      obx.QueryIntegerProperty<Playlist>(_entities[5].properties[0]);

  /// See [Playlist.name].
  static final name =
      obx.QueryStringProperty<Playlist>(_entities[5].properties[1]);

  /// See [Playlist.user].
  static final user =
      obx.QueryRelationToOne<Playlist, UserProfile>(_entities[5].properties[2]);

  /// see [Playlist.songs]
  static final songs =
      obx.QueryRelationToMany<Playlist, Song>(_entities[5].relations[0]);
}

/// [DatabasePlayerSettings] entity fields to define ObjectBox queries.
class DatabasePlayerSettings_ {
  /// See [DatabasePlayerSettings.id].
  static final id = obx.QueryIntegerProperty<DatabasePlayerSettings>(
      _entities[6].properties[0]);

  /// See [DatabasePlayerSettings.velocityStep].
  static final velocityStep = obx.QueryDoubleProperty<DatabasePlayerSettings>(
      _entities[6].properties[1]);

  /// See [DatabasePlayerSettings.maxVelocity].
  static final maxVelocity = obx.QueryIntegerProperty<DatabasePlayerSettings>(
      _entities[6].properties[2]);

  /// See [DatabasePlayerSettings.volumeStep].
  static final volumeStep = obx.QueryDoubleProperty<DatabasePlayerSettings>(
      _entities[6].properties[3]);
}

/// [DatabaseSettings] entity fields to define ObjectBox queries.
class DatabaseSettings_ {
  /// See [DatabaseSettings.id].
  static final id =
      obx.QueryIntegerProperty<DatabaseSettings>(_entities[7].properties[0]);

  /// See [DatabaseSettings.recentRange].
  static final recentRange =
      obx.QueryIntegerProperty<DatabaseSettings>(_entities[7].properties[1]);

  /// See [DatabaseSettings.interface].
  static final interface =
      obx.QueryRelationToOne<DatabaseSettings, DatabaseInterfaceSettings>(
          _entities[7].properties[2]);

  /// See [DatabaseSettings.share].
  static final share =
      obx.QueryRelationToOne<DatabaseSettings, DatabaseShareSettings>(
          _entities[7].properties[3]);

  /// See [DatabaseSettings.layout].
  static final layout =
      obx.QueryRelationToOne<DatabaseSettings, DatabaseLayoutSettings>(
          _entities[7].properties[4]);

  /// See [DatabaseSettings.player].
  static final player =
      obx.QueryRelationToOne<DatabaseSettings, DatabasePlayerSettings>(
          _entities[7].properties[5]);

  /// See [DatabaseSettings.source].
  static final source =
      obx.QueryRelationToOne<DatabaseSettings, DatabaseSourceSettings>(
          _entities[7].properties[6]);
}

/// [DatabaseShareSettings] entity fields to define ObjectBox queries.
class DatabaseShareSettings_ {
  /// See [DatabaseShareSettings.id].
  static final id = obx.QueryIntegerProperty<DatabaseShareSettings>(
      _entities[8].properties[0]);

  /// See [DatabaseShareSettings.editorUrls].
  static final editorUrls =
      obx.QueryStringVectorProperty<DatabaseShareSettings>(
          _entities[8].properties[1]);
}

/// [UserProfile] entity fields to define ObjectBox queries.
class UserProfile_ {
  /// See [UserProfile.id].
  static final id =
      obx.QueryIntegerProperty<UserProfile>(_entities[9].properties[0]);

  /// See [UserProfile.name].
  static final name =
      obx.QueryStringProperty<UserProfile>(_entities[9].properties[1]);

  /// See [UserProfile.banner].
  static final banner =
      obx.QueryByteVectorProperty<UserProfile>(_entities[9].properties[2]);

  /// See [UserProfile.photo].
  static final photo =
      obx.QueryByteVectorProperty<UserProfile>(_entities[9].properties[3]);

  /// See [UserProfile.current].
  static final current =
      obx.QueryBooleanProperty<UserProfile>(_entities[9].properties[4]);

  /// See [UserProfile.settings].
  static final settings = obx.QueryRelationToOne<UserProfile, DatabaseSettings>(
      _entities[9].properties[5]);

  /// see [UserProfile.playlists]
  static final playlists =
      obx.QueryBacklinkToMany<Playlist, UserProfile>(Playlist_.user);
}

/// [DatabaseLayoutSettings] entity fields to define ObjectBox queries.
class DatabaseLayoutSettings_ {
  /// See [DatabaseLayoutSettings.id].
  static final id = obx.QueryIntegerProperty<DatabaseLayoutSettings>(
      _entities[10].properties[0]);

  /// See [DatabaseLayoutSettings.dbContainerStyle].
  static final dbContainerStyle =
      obx.QueryStringProperty<DatabaseLayoutSettings>(
          _entities[10].properties[1]);

  /// See [DatabaseLayoutSettings.dbHiddenScreens].
  static final dbHiddenScreens =
      obx.QueryStringVectorProperty<DatabaseLayoutSettings>(
          _entities[10].properties[2]);

  /// See [DatabaseLayoutSettings.dbVolumeType].
  static final dbVolumeType = obx.QueryStringProperty<DatabaseLayoutSettings>(
      _entities[10].properties[3]);

  /// See [DatabaseLayoutSettings.dbPlayerElements].
  static final dbPlayerElements =
      obx.QueryStringVectorProperty<DatabaseLayoutSettings>(
          _entities[10].properties[4]);

  /// See [DatabaseLayoutSettings.songGridItems].
  static final songGridItems = obx.QueryIntegerProperty<DatabaseLayoutSettings>(
      _entities[10].properties[5]);

  /// See [DatabaseLayoutSettings.artistGridItems].
  static final artistGridItems =
      obx.QueryIntegerProperty<DatabaseLayoutSettings>(
          _entities[10].properties[6]);

  /// See [DatabaseLayoutSettings.genreGridItems].
  static final genreGridItems =
      obx.QueryIntegerProperty<DatabaseLayoutSettings>(
          _entities[10].properties[7]);

  /// See [DatabaseLayoutSettings.albumGridItems].
  static final albumGridItems =
      obx.QueryIntegerProperty<DatabaseLayoutSettings>(
          _entities[10].properties[8]);

  /// See [DatabaseLayoutSettings.playlistGridItems].
  static final playlistGridItems =
      obx.QueryIntegerProperty<DatabaseLayoutSettings>(
          _entities[10].properties[9]);

  /// see [DatabaseLayoutSettings.lateralElements]
  static final lateralElements =
      obx.QueryRelationToMany<DatabaseLayoutSettings, LateralPlayerElement>(
          _entities[10].relations[0]);
}

/// [LateralPlayerElement] entity fields to define ObjectBox queries.
class LateralPlayerElement_ {
  /// See [LateralPlayerElement.id].
  static final id = obx.QueryIntegerProperty<LateralPlayerElement>(
      _entities[11].properties[0]);

  /// See [LateralPlayerElement.dbElement].
  static final dbElement = obx.QueryStringProperty<LateralPlayerElement>(
      _entities[11].properties[1]);

  /// See [LateralPlayerElement.dbPosition].
  static final dbPosition = obx.QueryStringProperty<LateralPlayerElement>(
      _entities[11].properties[2]);
}

/// [DatabaseInterfaceSettings] entity fields to define ObjectBox queries.
class DatabaseInterfaceSettings_ {
  /// See [DatabaseInterfaceSettings.id].
  static final id = obx.QueryIntegerProperty<DatabaseInterfaceSettings>(
      _entities[12].properties[0]);

  /// See [DatabaseInterfaceSettings.showChangeTheme].
  static final showChangeTheme =
      obx.QueryBooleanProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[1]);

  /// See [DatabaseInterfaceSettings.showChangePalette].
  static final showChangePalette =
      obx.QueryBooleanProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[2]);

  /// See [DatabaseInterfaceSettings.themeBasedOnTime].
  static final themeBasedOnTime =
      obx.QueryBooleanProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[3]);

  /// See [DatabaseInterfaceSettings.dbTitleType].
  static final dbTitleType = obx.QueryStringProperty<DatabaseInterfaceSettings>(
      _entities[12].properties[4]);

  /// See [DatabaseInterfaceSettings.dbProgressType].
  static final dbProgressType =
      obx.QueryStringProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[5]);

  /// See [DatabaseInterfaceSettings.dbColorPalette].
  static final dbColorPalette =
      obx.QueryStringProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[6]);

  /// See [DatabaseInterfaceSettings.dbColorTheme].
  static final dbColorTheme =
      obx.QueryStringProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[7]);

  /// See [DatabaseInterfaceSettings.dbPictureType].
  static final dbPictureType =
      obx.QueryStringProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[8]);

  /// See [DatabaseInterfaceSettings.dbControlsType].
  static final dbControlsType =
      obx.QueryStringProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[9]);

  /// See [DatabaseInterfaceSettings.dbBaseTheme].
  static final dbBaseTheme = obx.QueryStringProperty<DatabaseInterfaceSettings>(
      _entities[12].properties[10]);

  /// See [DatabaseInterfaceSettings.coloredSongCard].
  static final coloredSongCard =
      obx.QueryBooleanProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[11]);

  /// See [DatabaseInterfaceSettings.coloredAlbumCard].
  static final coloredAlbumCard =
      obx.QueryBooleanProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[12]);

  /// See [DatabaseInterfaceSettings.coloredGenreCard].
  static final coloredGenreCard =
      obx.QueryBooleanProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[13]);

  /// See [DatabaseInterfaceSettings.coloredArtistCard].
  static final coloredArtistCard =
      obx.QueryBooleanProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[14]);

  /// See [DatabaseInterfaceSettings.coloredPlaylistCard].
  static final coloredPlaylistCard =
      obx.QueryBooleanProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[15]);

  /// See [DatabaseInterfaceSettings.dbSongCardStyle].
  static final dbSongCardStyle =
      obx.QueryStringProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[16]);

  /// See [DatabaseInterfaceSettings.dbAlbumCardStyle].
  static final dbAlbumCardStyle =
      obx.QueryStringProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[17]);

  /// See [DatabaseInterfaceSettings.dbArtistCardStyle].
  static final dbArtistCardStyle =
      obx.QueryStringProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[18]);

  /// See [DatabaseInterfaceSettings.dbPlaylistCardStyle].
  static final dbPlaylistCardStyle =
      obx.QueryStringProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[19]);

  /// See [DatabaseInterfaceSettings.dbGenreCardStyle].
  static final dbGenreCardStyle =
      obx.QueryStringProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[20]);

  /// See [DatabaseInterfaceSettings.themeChangeTimer].
  static final themeChangeTimer =
      obx.QueryIntegerProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[21]);

  /// See [DatabaseInterfaceSettings.dbAlbumRelationStyle].
  static final dbAlbumRelationStyle =
      obx.QueryStringProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[22]);

  /// See [DatabaseInterfaceSettings.dbGenreRelationStyle].
  static final dbGenreRelationStyle =
      obx.QueryStringProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[23]);

  /// See [DatabaseInterfaceSettings.dbArtistRelationStyle].
  static final dbArtistRelationStyle =
      obx.QueryStringProperty<DatabaseInterfaceSettings>(
          _entities[12].properties[24]);
}

/// [DatabaseSourceSettings] entity fields to define ObjectBox queries.
class DatabaseSourceSettings_ {
  /// See [DatabaseSourceSettings.id].
  static final id = obx.QueryIntegerProperty<DatabaseSourceSettings>(
      _entities[13].properties[0]);

  /// See [DatabaseSourceSettings.invidiousInstances].
  static final invidiousInstances =
      obx.QueryStringVectorProperty<DatabaseSourceSettings>(
          _entities[13].properties[1]);
}
